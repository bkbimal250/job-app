import React, { useEffect, useState } from 'react';
import { 
  Search, FileText, Calendar, Download, Eye, 
  CheckCircle, XCircle, MessageSquare, User,
  Briefcase, Clock, Phone, Mail, AlertCircle, FileImage,
  X, RefreshCw, Filter, ArrowLeft, ChevronDown
} from 'lucide-react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { getToken } from '../utils/getToken';

const BASE_URL = import.meta.env.VITE_API_BASE_URL || "http://localhost:5000/api/v1";

const AdminJobApplications = () => {
  const { jobId } = useParams();
  const navigate = useNavigate();
  
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedApplications, setSelectedApplications] = useState([]);
  const [applications, setApplications] = useState([]);
  const [jobDetails, setJobDetails] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedApplication, setSelectedApplication] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [applicationStats, setApplicationStats] = useState({
    total: 0,
    pending: 0,
    reviewing: 0,
    interviewed: 0,
    hired: 0,
    rejected: 0
  });

  const getStatusColor = (status) => {
    const statusColors = {
      'new': 'bg-green-100 text-green-800',
      'pending': 'bg-green-100 text-green-800',
      'reviewing': 'bg-yellow-100 text-yellow-800',
      'under_review': 'bg-yellow-100 text-yellow-800', 
      'interviewed': 'bg-blue-100 text-blue-800',
      'hired': 'bg-purple-100 text-purple-800',
      'rejected': 'bg-red-100 text-red-800',
      'withdrawn': 'bg-gray-100 text-gray-800'
    };
    return statusColors[status] || 'bg-gray-100 text-gray-800';
  };

  const getStatusIcon = (status) => {
    switch(status) {
      case 'new':
      case 'pending':
        return <Clock size={14} className="mr-1" />;
      case 'reviewing':
      case 'under_review':
        return <Eye size={14} className="mr-1" />;
      case 'interviewed':
        return <MessageSquare size={14} className="mr-1" />;
      case 'hired':
        return <CheckCircle size={14} className="mr-1" />;
      case 'rejected':
        return <XCircle size={14} className="mr-1" />;
      default:
        return null;
    }
  };

  // Helper function to extract MongoDB ObjectId
  const extractId = (idObject) => {
    if (typeof idObject === 'string') return idObject;
    if (idObject && idObject.$oid) return idObject.$oid;
    return idObject;
  };

  // Fetch job details and applications
  useEffect(() => {
    const fetchJobAndApplications = async () => {
      setLoading(true);
      
      try {
        // First fetch the job details
        const jobResponse = await axios.get(`${BASE_URL}/spajobs/`, {
          headers: { Authorization: `Bearer ${getToken()}` }
        });
        
        if (jobResponse.data) {
          setJobDetails(jobResponse.data);
        }
        
        // Then fetch applications for this job
        const appResponse = await axios.get(`${BASE_URL}/application/admin/applications`, {
          headers: { Authorization: `Bearer ${getToken()}` }
        });
        
        console.log('Fetched applications:', appResponse.data);
        
        let applicationsData = [];
        if (appResponse.data && Array.isArray(appResponse.data)) {
          applicationsData = appResponse.data;
        } else if (appResponse.data && Array.isArray(appResponse.data.applications)) {
          applicationsData = appResponse.data.applications;
        } else {
          console.error('Unexpected applications data format:', appResponse.data);
          setApplications([]);
          setLoading(false);
          return;
        }
        
        // Normalize application data
        const normalizedApplications = applicationsData.map(app => ({
          ...app,
          _id: extractId(app._id),
          job: extractId(app.job),
          candidate: extractId(app.candidate),
          appliedDate: app.appliedAt ? 
            (app.appliedAt.$date ? new Date(app.appliedAt.$date.$numberLong) : new Date(app.appliedAt)) : 
            new Date(app.createdAt || Date.now())
        }));
        
        setApplications(normalizedApplications);
        
        // Calculate application stats
        const stats = {
          total: normalizedApplications.length,
          pending: normalizedApplications.filter(app => app.status === 'pending').length,
          reviewing: normalizedApplications.filter(app => app.status === 'reviewing' || app.status === 'under_review').length,
          interviewed: normalizedApplications.filter(app => app.status === 'interviewed').length,
          hired: normalizedApplications.filter(app => app.status === 'hired').length,
          rejected: normalizedApplications.filter(app => app.status === 'rejected').length
        };
        
        setApplicationStats(stats);
        setError(null);
        
      } catch (err) {
        console.error('Error fetching job applications:', err);
        setError('Failed to load applications. Please check your permissions or try again later.');
      } finally {
        setLoading(false);
      }
    };
    
    if (jobId) {
      fetchJobAndApplications();
    }
  }, [jobId]);

  // Update application status
  const updateApplicationStatus = async (applicationId, newStatus) => {
    try {
      const response = await axios.put(
        `${BASE_URL}/application/user/applications/${applicationId}`, 
        { status: newStatus },
        { headers: { Authorization: `Bearer ${getToken()}` } }
      );
      
      if (response.data) {
        // Update the application in state
        setApplications(prevApps => 
          prevApps.map(app => 
            app._id === applicationId ? { ...app, status: newStatus } : app
          )
        );
        
        // If currently viewing this application in modal, update it
        if (selectedApplication && selectedApplication._id === applicationId) {
          setSelectedApplication({...selectedApplication, status: newStatus});
        }
        
        // Recalculate stats
        setApplicationStats(prev => ({
          ...prev,
          pending: newStatus === 'pending' ? prev.pending + 1 : 
            prev.pending - (applications.find(a => a._id === applicationId)?.status === 'pending' ? 1 : 0),
          reviewing: (newStatus === 'reviewing' || newStatus === 'under_review') ? prev.reviewing + 1 : 
            prev.reviewing - (applications.find(a => a._id === applicationId)?.status === 'reviewing' || 
              applications.find(a => a._id === applicationId)?.status === 'under_review' ? 1 : 0),
          interviewed: newStatus === 'interviewed' ? prev.interviewed + 1 : 
            prev.interviewed - (applications.find(a => a._id === applicationId)?.status === 'interviewed' ? 1 : 0),
          hired: newStatus === 'hired' ? prev.hired + 1 : 
            prev.hired - (applications.find(a => a._id === applicationId)?.status === 'hired' ? 1 : 0),
          rejected: newStatus === 'rejected' ? prev.rejected + 1 : 
            prev.rejected - (applications.find(a => a._id === applicationId)?.status === 'rejected' ? 1 : 0),
        }));
      }
    } catch (err) {
      console.error('Error updating application status:', err);
      alert('Failed to update application status. Please try again.');
    }
  };

  // Filter applications based on search term and status
  const filteredApplications = applications.filter(app => {
    const candidateName = app.name || app.applicantName || 
                         app.candidate?.name || '';
    const email = app.email || app.candidate?.email || '';
    
    // Status filter
    const matchesStatus = statusFilter === 'all' || app.status === statusFilter;
    
    // Search filter
    const matchesSearch = searchTerm === '' || 
      candidateName.toLowerCase().includes(searchTerm.toLowerCase()) || 
      email.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesSearch && matchesStatus;
  });

  const handleDownloadCSV = () => {
    if (filteredApplications.length === 0) {
      alert('No applications to download');
      return;
    }
    
    // Prepare CSV content
    const headers = ['Applicant Name', 'Email', 'Phone', 'Applied Date', 'Status', 'Cover Letter'];
    
    const csvContent = [
      headers.join(','),
      ...filteredApplications.map(app => [
        `"${app.name || app.applicantName || app.candidate?.name || 'Unknown'}"`,
        app.email || app.candidate?.email || '',
        app.phone || app.candidate?.phone || '',
        formatDate(app.appliedDate),
        app.status || '',
        `"${app.coverLetter || app.message || ''}"`
      ].join(','))
    ].join('\n');

    // Create and trigger download
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `job_applications_${jobId}_${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleBulkDownload = () => {
    // Download only selected applications
    const selectedData = applications.filter(app => 
      selectedApplications.includes(app._id)
    );
    
    if (selectedData.length === 0) {
      alert('Please select applications to download');
      return;
    }

    // Same CSV generation logic as above
    const headers = ['Applicant Name', 'Email', 'Phone', 'Applied Date', 'Status', 'Cover Letter'];
    
    const csvContent = [
      headers.join(','),
      ...selectedData.map(app => [
        `"${app.name || app.applicantName || app.candidate?.name || 'Unknown'}"`,
        app.email || app.candidate?.email || '',
        app.phone || app.candidate?.phone || '',
        formatDate(app.appliedDate),
        app.status || '',
        `"${app.coverLetter || app.message || ''}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `selected_applications_${jobId}_${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const toggleSelectApplication = (applicationId) => {
    setSelectedApplications(prev => 
      prev.includes(applicationId) 
        ? prev.filter(id => id !== applicationId)
        : [...prev, applicationId]
    );
  };

  const toggleSelectAll = () => {
    if (selectedApplications.length === filteredApplications.length) {
      setSelectedApplications([]);
    } else {
      setSelectedApplications(filteredApplications.map(app => app._id));
    }
  };

  const viewApplicationDetails = (application) => {
    setSelectedApplication(application);
    setShowModal(true);
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return dateString;
    
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  return (
    <div className="bg-gray-50 min-h-screen p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header and Back button */}
        <div className="mb-6">
          <button
            onClick={() => navigate(-1)}
            className="flex items-center text-blue-600 hover:underline mb-4"
          >
            <ArrowLeft size={16} className="mr-1" /> Back to Jobs
          </button>
          
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-800">
                Applications for {jobDetails ? jobDetails.title : 'Job'}
              </h1>
              {jobDetails && (
                <p className="text-gray-500 mt-1">
                  {jobDetails.location}, {jobDetails.city}, {jobDetails.state}
                </p>
              )}
            </div>
            <div className="flex gap-3">
              {selectedApplications.length > 0 && (
                <button 
                  onClick={handleBulkDownload}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-green-700 transition shadow-sm"
                >
                  <Download size={18} />
                  Download Selected ({selectedApplications.length})
                </button>
              )}
              <button 
                onClick={handleDownloadCSV}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700 transition shadow-sm"
              >
                <Download size={18} />
                Export All
              </button>
            </div>
          </div>
        </div>
        
        {/* Application Stats */}
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
          <div className="bg-white p-4 rounded-xl shadow-sm border border-gray-100">
            <p className="text-sm text-gray-500 mb-1">Total Applications</p>
            <p className="text-2xl font-bold text-gray-800">{applicationStats.total || 0}</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border border-gray-100">
            <p className="text-sm text-gray-500 mb-1">Pending</p>
            <p className="text-2xl font-bold text-green-600">{applicationStats.pending || 0}</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border border-gray-100">
            <p className="text-sm text-gray-500 mb-1">Reviewing</p>
            <p className="text-2xl font-bold text-yellow-600">{applicationStats.reviewing || 0}</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border border-gray-100">
            <p className="text-sm text-gray-500 mb-1">Interviewed</p>
            <p className="text-2xl font-bold text-blue-600">{applicationStats.interviewed || 0}</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border border-gray-100">
            <p className="text-sm text-gray-500 mb-1">Hired</p>
            <p className="text-2xl font-bold text-purple-600">{applicationStats.hired || 0}</p>
          </div>
          <div className="bg-white p-4 rounded-xl shadow-sm border border-gray-100">
            <p className="text-sm text-gray-500 mb-1">Rejected</p>
            <p className="text-2xl font-bold text-red-600">{applicationStats.rejected || 0}</p>
          </div>
        </div>
        
        {/* Filter Bar */}
        <div className="bg-white rounded-xl shadow-sm mb-6 border border-gray-100">
          <div className="p-6 border-b border-gray-100 grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Search */}
            <div className="relative">
              <Search className="absolute left-3 top-3 text-gray-400" size={18} />
              <input
                type="text"
                placeholder="Search by name or email..."
                className="w-full pl-10 pr-4 py-2.5 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-100 focus:border-blue-500 transition"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            
            {/* Status filter */}
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Filter className="text-gray-400" size={18} />
              </div>
              <select
                className="w-full pl-10 pr-4 py-2.5 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-100 focus:border-blue-500 transition appearance-none bg-white"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
              >
                <option value="all">All Statuses</option>
                <option value="new">New</option>
                <option value="pending">Pending</option>
                <option value="reviewing">Reviewing</option>
                <option value="under_review">Under Review</option>
                <option value="interviewed">Interviewed</option>
                <option value="hired">Hired</option>
                <option value="rejected">Rejected</option>
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <ChevronDown className="h-4 w-4 text-gray-500" />
              </div>
            </div>
          </div>

          {/* Applications Table */}
          {loading ? (
            <div className="p-12 flex flex-col items-center justify-center">
              <RefreshCw className="h-12 w-12 text-blue-500 mb-4 animate-spin" />
              <p className="text-gray-500 text-lg">Loading applications...</p>
            </div>
          ) : error ? (
            <div className="p-12 flex flex-col items-center justify-center">
              <AlertCircle className="h-12 w-12 text-red-500 mb-4" />
              <p className="text-gray-700 text-lg mb-2">Failed to load applications</p>
              <p className="text-gray-500">{error}</p>
            </div>
          ) : filteredApplications.length === 0 ? (
            <div className="p-12 flex flex-col items-center justify-center">
              <FileText className="h-12 w-12 text-gray-400 mb-4" />
              <p className="text-gray-700 text-lg mb-2">No applications found</p>
              <p className="text-gray-500">
                {applications.length > 0 
                  ? "Try adjusting your search or filters to find what you're looking for."
                  : "No one has applied to this job yet."}
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="w-8 px-6 py-3">
                      <input 
                        type="checkbox" 
                        checked={selectedApplications.length === filteredApplications.length && filteredApplications.length > 0}
                        onChange={toggleSelectAll}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500 transition"
                      />
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Applicant</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Applied Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredApplications.map((application) => (
                    <tr key={application._id} className="hover:bg-gray-50 transition">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <input 
                          type="checkbox" 
                          checked={selectedApplications.includes(application._id)}
                          onChange={() => toggleSelectApplication(application._id)}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500 transition"
                        />
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex flex-col">
                          <span className="font-medium text-gray-900">
                            {application.name || application.applicantName || application.candidate?.name || 'Unknown Applicant'}
                          </span>
                          <span className="text-sm text-gray-500">
                            {application.email || application.candidate?.email || 'No email provided'}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <Calendar size={16} className="mr-2 text-gray-400" />
                          {formatDate(application.appliedDate)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-3 py-1 inline-flex text-xs leading-5 font-medium rounded-full ${getStatusColor(application.status)}`}>
                          {getStatusIcon(application.status)}
                          {application.status?.charAt(0).toUpperCase() + application.status?.slice(1).replace('_', ' ') || 'Unknown'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-center">
                        <div className="flex items-center justify-center space-x-2">
                          <button 
                            className="p-1.5 bg-blue-50 text-blue-600 hover:bg-blue-100 rounded transition" 
                            title="View Details"
                            onClick={() => viewApplicationDetails(application)}
                          >
                            <Eye size={16} />
                          </button>
                          {application.resume && (
                            <a 
                              href={application.resume} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="p-1.5 bg-purple-50 text-purple-600 hover:bg-purple-100 rounded transition" 
                              title="View Resume"
                            >
                              <FileText size={16} />
                            </a>
                          )}
                          <button 
                            className="p-1.5 bg-green-50 text-green-600 hover:bg-green-100 rounded transition" 
                            title="Download"
                            onClick={() => {
                              toggleSelectApplication(application._id);
                              handleBulkDownload();
                            }}
                          >
                            <Download size={16} />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Application Details Modal */}
      {showModal && selectedApplication && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-100 flex justify-between items-center sticky top-0 bg-white z-10">
              <h2 className="text-xl font-bold text-gray-800">Application Details</h2>
              <button 
                onClick={() => setShowModal(false)}
                className="p-1.5 bg-gray-100 text-gray-600 hover:bg-gray-200 rounded-full transition"
              >
                <X size={18} />
              </button>
            </div>
            <div className="p-6 space-y-6">
              {/* Applicant Information */}
              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                  <User className="mr-2 h-5 w-5 text-green-500" />
                  Applicant Information
                </h3>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <div>
                      <p className="text-sm text-gray-500">Name</p>
                      <p className="font-medium">
                        {selectedApplication.name || 
                         selectedApplication.applicantName || 
                         selectedApplication.candidate?.name || 
                         'Not provided'}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Email</p>
                      <div className="flex items-center">
                        <Mail className="mr-1 h-4 w-4 text-gray-400" />
                        <p className="font-medium">{selectedApplication.email || selectedApplication.candidate?.email || 'Not provided'}</p>
                      </div>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Phone</p>
                      <div className="flex items-center">
                        <Phone className="mr-1 h-4 w-4 text-gray-400" />
                        <p className="font-medium">{selectedApplication.phone || selectedApplication.candidate?.phone || 'Not provided'}</p>
                      </div>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Applied On</p>
                      <p className="font-medium">{formatDate(selectedApplication.appliedDate)}</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Application Status */}
              <div className="space-y-2">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                  <CheckCircle className="mr-2 h-5 w-5 text-blue-500" />
                  Application Status
                </h3>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="mb-3">
                    <p className="text-sm text-gray-500 mb-2">Current Status</p>
                    <span className={`px-3 py-1 inline-flex text-xs leading-5 font-medium rounded-full ${getStatusColor(selectedApplication.status)}`}>
                      {getStatusIcon(selectedApplication.status)}
                      {selectedApplication.status?.charAt(0).toUpperCase() + selectedApplication.status?.slice(1).replace('_', ' ') || 'Unknown'}
                    </span>
                  </div>
                  
                  <div>
                    <p className="text-sm text-gray-500 mb-2">Update Status</p>
                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-2">
                      <button 
                        onClick={() => updateApplicationStatus(selectedApplication._id, 'pending')}
                        className={`px-3 py-2 text-xs rounded-lg flex items-center justify-center transition ${
                          selectedApplication.status === 'pending' 
                            ? 'bg-green-100 text-green-800 font-medium' 
                            : 'bg-gray-100 text-gray-600 hover:bg-green-50 hover:text-green-600'
                        }`}
                      >
                        <Clock size={14} className="mr-1" /> Pending
                      </button>
                      <button 
                        onClick={() => updateApplicationStatus(selectedApplication._id, 'reviewing')}
                        className={`px-3 py-2 text-xs rounded-lg flex items-center justify-center transition ${
                          selectedApplication.status === 'reviewing' 
                            ? 'bg-yellow-100 text-yellow-800 font-medium' 
                            : 'bg-gray-100 text-gray-600 hover:bg-yellow-50 hover:text-yellow-600'
                        }`}
                      >
                        <Eye size={14} className="mr-1" /> Reviewing
                      </button>
                      <button 
                        onClick={() => updateApplicationStatus(selectedApplication._id, 'interviewed')}
                        className={`px-3 py-2 text-xs rounded-lg flex items-center justify-center transition ${
                          selectedApplication.status === 'interviewed' 
                            ? 'bg-blue-100 text-blue-800 font-medium' 
                            : 'bg-gray-100 text-gray-600 hover:bg-blue-50 hover:text-blue-600'
                        }`}
                      >
                        <MessageSquare size={14} className="mr-1" /> Interviewed
                      </button>
                      <button 
                        onClick={() => updateApplicationStatus(selectedApplication._id, 'hired')}
                        className={`px-3 py-2 text-xs rounded-lg flex items-center justify-center transition ${
                            selectedApplication.status === 'hired' 
                           ? 'bg-purple-100 text-purple-800 font-medium' 
                           : 'bg-gray-100 text-gray-600 hover:bg-purple-50 hover:text-purple-600'
                       }`}
                     >
                       <CheckCircle size={14} className="mr-1" /> Hired
                     </button>
                     <button 
                       onClick={() => updateApplicationStatus(selectedApplication._id, 'rejected')}
                       className={`px-3 py-2 text-xs rounded-lg flex items-center justify-center transition ${
                         selectedApplication.status === 'rejected' 
                           ? 'bg-red-100 text-red-800 font-medium' 
                           : 'bg-gray-100 text-gray-600 hover:bg-red-50 hover:text-red-600'
                       }`}
                     >
                       <XCircle size={14} className="mr-1" /> Rejected
                     </button>
                   </div>
                 </div>
               </div>
             </div>

             {/* Cover Letter / Message */}
             {selectedApplication.coverLetter && (
               <div className="space-y-2">
                 <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                   <FileText className="mr-2 h-5 w-5 text-amber-500" />
                   Cover Letter
                 </h3>
                 <div className="bg-gray-50 p-4 rounded-lg">
                   <p className="whitespace-pre-line text-gray-700">
                     {selectedApplication.coverLetter}
                   </p>
                 </div>
               </div>
             )}
             
             {/* Resume Link */}
             {selectedApplication.resume && (
               <div className="space-y-2">
                 <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                   <FileImage className="mr-2 h-5 w-5 text-purple-500" />
                   Resume
                 </h3>
                 <div className="bg-gray-50 p-4 rounded-lg">
                   <a 
                     href={selectedApplication.resume} 
                     target="_blank" 
                     rel="noopener noreferrer"
                     className="flex items-center text-blue-600 hover:underline"
                   >
                     <FileText className="mr-2 h-5 w-5" />
                     View Resume
                   </a>
                 </div>
               </div>
             )}

             {/* Applicant Notes (Admin-only feature) */}
             <div className="space-y-2">
               <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                 <FileText className="mr-2 h-5 w-5 text-gray-500" />
                 Internal Notes
               </h3>
               <div className="bg-gray-50 p-4 rounded-lg">
                 <textarea
                   className="w-full min-h-[100px] border border-gray-300 rounded-lg p-3 text-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                   placeholder="Add private notes about this candidate..."
                   value={selectedApplication.adminNotes || ''}
                   onChange={(e) => {
                     // Update internal notes locally
                     setSelectedApplication({
                       ...selectedApplication,
                       adminNotes: e.target.value
                     });
                   }}
                 ></textarea>
                 <div className="mt-2 flex justify-end">
                   <button
                     className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
                     onClick={async () => {
                       try {
                         // Save notes to backend
                         await axios.put(
                           `${BASE_URL}/application/user/applications/${selectedApplication._id}`,
                           { adminNotes: selectedApplication.adminNotes },
                           { headers: { Authorization: `Bearer ${getToken()}` } }
                         );
                         
                         // Update application in state
                         setApplications(prevApps => 
                           prevApps.map(app => 
                             app._id === selectedApplication._id ? 
                               { ...app, adminNotes: selectedApplication.adminNotes } : 
                               app
                           )
                         );
                         
                         alert('Notes saved successfully');
                       } catch (err) {
                         console.error('Error saving notes:', err);
                         alert('Failed to save notes. Please try again.');
                       }
                     }}
                   >
                     Save Notes
                   </button>
                 </div>
               </div>
             </div>
           </div>
           
           <div className="p-6 border-t border-gray-100 bg-gray-50 flex justify-between">
             <button 
               onClick={() => setShowModal(false)}
               className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
             >
               Close
             </button>
             
             <div className="flex space-x-3">
               {selectedApplication.resume && (
                 <a 
                   href={selectedApplication.resume}
                   target="_blank" 
                   rel="noopener noreferrer"
                   className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition flex items-center"
                 >
                   <FileText className="mr-2 h-4 w-4" />
                   View Resume
                 </a>
               )}
               
               <a 
                 href={`mailto:${selectedApplication.email || selectedApplication.candidate?.email}`}
                 className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition flex items-center"
               >
                 <Mail className="mr-2 h-4 w-4" />
                 Contact Applicant
               </a>
             </div>
           </div>
         </div>
       </div>
     )}
   </div>
 );
};

export default AdminJobApplications;